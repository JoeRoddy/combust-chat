{
  "dependencies": {
    "users": "latest"
  },
  "installation": {
    "components/App.jsx": {
      "imports": ["import Chatboxes from \"./chat/Chatboxes\";"],
      "renderEnd": ["<Chatboxes {...this.props} />"]
    },
    "components/users/Profile.jsx": {
      "imports": ["import chatStore from \"../../stores/ChatStore\";"],
      "replace": {
        "pattern": "alert(\"combust install chat\");\n",
        "code": ["chatStore.openConversationWithUser(userId);"]
      }
    }
  },
  "installation_mobile": {
    "components/users/Profile.js": {
      "imports": ["import chatStore from \"../../stores/ChatStore\";"],
      "replace": [
        {
          "pattern":
            "alert(\"Execute from your terminal:\", \"combust install chat\");\n",
          "code": [
            "chatStore.openConversationWithUser(userId);",
            "nav.navigate(\"ChatScreen\", { participantIds: [userId] });"
          ]
        }
      ]
    },
    "components/reusable/SideMenu.js": {
      "after": {
        "pattern": "const COMBUST_MENU_ITEMS = [",
        "code": [
          "{title: \"My Messages\",icon: \"message\",onPress: () => nav.navigate(\"MyMessages\")},"
        ]
      }
    },
    "components/Routes.js": {
      "imports": [
        "import MyMessages from \"./chat/MyMessages\";",
        "import ChatScreen from \"./chat/ChatScreen\";"
      ],
      "after": {
        "pattern": "const COMBUST_SCREENS = {",
        "code": [
          "ChatScreen: { screen: ChatScreen, path: \"/ChatScreen\" },",
          "MyMessages: { screen: MyMessages, path: \"/MyMessages\" },"
        ]
      }
    }
  },
  "npm_dependencies_mobile": {
    "react-native-gifted-chat": "^0.4.3"
  },
  "rules": {
    "conversationsByUser": {
      "$uid": {
        ".read": "$uid === auth.uid",
        "$convoId": {
          ".write": "!data.exists()"
        }
      }
    },
    "conversations": {
      "$convoId": {
        ".read": "data.child('participants').child(auth.uid).exists()",
        ".write":
          "!data.exists() || data.child('participants').child(auth.uid).exists()"
      }
    },
    "messages": {
      "$msgId": {
        ".write": "!data.exists()",
        ".read": true
      }
    }
  }
}
